#version 460
#extension GL_EXT_ray_tracing : require

struct Payload {
    uint seed;

    bool doesScatter;
    vec3 attenuation;
    vec3 scatterDirection;
};


layout(binding = 0, rgba8) uniform image2D renderTarget;
layout(binding = 1) uniform accelerationStructureEXT accelerationStructure;

layout(location = 0) rayPayloadEXT Payload payload;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Camera {
    float fov;
    float aperture;
    float focusDistance;
    vec3 lookFrom;
    vec3 lookAt;
    vec3 up;
};

struct Viewport {
    vec3 horizontal;
    vec3 vertical;
    vec3 upperLeftCorner;
    vec3 cameraUp;
    vec3 cameraRight;
};

const Camera camera = Camera(25.0f, 0.0f, 10.0f, vec3(13.0f, 2.0f, -3.0f), vec3(0.0f), vec3(0.0f, 1.0f, 0.0f));

Viewport calculateViewport(const float aspectRatio);
Ray getCameraRay(const Viewport viewport, const vec2 uv);
uint getRandomSeed(const uint val0, const uint val1);

void main() {
    payload.seed = getRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);

    const vec2 size = vec2(gl_LaunchSizeEXT.xy);
    const float aspectRatio = size.x / size.y;

    const Viewport viewport = calculateViewport(aspectRatio);

    const vec2 uv = gl_LaunchIDEXT.xy / size;
    Ray ray = getCameraRay(viewport, uv);

    traceRayEXT(accelerationStructure, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, ray.origin, 0.001f, ray.direction, 100.0f, 0);

    const vec3 pixelColor = sqrt(payload.attenuation);
    imageStore(renderTarget, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 1.0f));
}

Viewport calculateViewport(const float aspectRatio) {
    const float viewportHeight = tan(radians(camera.fov) / 2.0f) * 2.0f;
    const float viewportWidth = aspectRatio * viewportHeight;

    const vec3 cameraForward = normalize(camera.lookAt - camera.lookFrom);
    const vec3 cameraRight = normalize(cross(camera.up, cameraForward));
    const vec3 cameraUp = normalize(cross(cameraForward, cameraRight));

    const vec3 horizontal = viewportWidth * cameraRight * camera.focusDistance;
    const vec3 vertical = viewportHeight * cameraUp * camera.focusDistance;
    const vec3 upperLeftCorner = camera.lookFrom - horizontal / 2.0f + vertical / 2.0f + cameraForward * camera.focusDistance;

    return Viewport(horizontal, vertical, upperLeftCorner, cameraUp, cameraRight);
}

Ray getCameraRay(const Viewport viewport, const vec2 uv) {
    const vec3 from = camera.lookFrom;
    const vec3 to = viewport.upperLeftCorner + viewport.horizontal * uv.x - viewport.vertical * uv.y;

    return Ray(from, normalize(to - from));
}


// RANDOM
uint getRandomSeed(const uint val0, const uint val1) {
    uint v0 = val0;
    uint v1 = val1;
    uint s0 = 0;

    for (uint n = 0; n < 16; n++) {
        s0 += 0x9e3779b9;
        v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
        v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
    }

    return v0;
}
